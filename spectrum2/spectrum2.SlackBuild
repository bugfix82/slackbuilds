#!/bin/sh

name="spectrum2"
version="2.0.3"
filename="${name}-${version}.tar.gz"
arch="${ARCH:-`uname -m`}"
rev="1"
hostgcc=$(gcc -dumpmachine)
cwd=`pwd`
tmpdir="/tmp"
pkgdir="${tmpdir}/${name}-${version}-install"

case "${arch}" in
    i486|i686)	SLKCFLAGS="-O2 -march=i486 -mtune=i686"
		SLKLDFLAGS=""; LIBDIRSUFFIX=""
		;;
    x86_64)	SLKCFLAGS="-O2 -fPIC"
		SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
		;;
    athlon-xp)	SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
		SLKLDFLAGS=""; LIBDIRSUFFIX=""
		;;
esac

boldecho() {
	echo -e "\n\033[1m$1\033[0m" && sleep 1
}

do_exit() {
	boldecho "Exiting due error or interrupt"
	exit 1
}

do_unpack(){
	test -f ${cwd}/${filename} || return 1
	boldecho "Unpacking"
	tar xvfz "${cwd}/${filename}" || return 1
	return 0
}

do_cmake() {
	boldecho "Running cmake"
	cmake .. -DCMAKE_INSTALL_PREFIX=/usr -DLIB_INSTALL_DIR=/usr/lib${LIBDIRSUFFIX} || return 1
	return 0
}

do_make() {
	boldecho "Running make"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	make || return 1
	return 0
}

do_install() {
	boldecho "Installing"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	make DESTDIR="${pkgdir}" install || return 1
	return 0
}

do_man() {
	boldecho "Processing man pages"
	for i in {1..9} n m
	do
		rm -vf ${pkgdir}/usr/man/man${i}/*.gz
		( test -d ${pkgdir}/usr/man/man${i} && cd ${pkgdir}/usr/man/man${i} && gzip -v * )
	done
	return 0
}

do_doc() {
	boldecho "Processing docs"
	mkdir -p ${pkgdir}/usr/doc/${name}-${version}
	cp -a README ${pkgdir}/usr/doc/${name}-${version}
	cp ${cwd}/${name}.SlackBuild ${pkgdir}/usr/doc/${name}-${version}/${name}.SlackBuild
	for f in etc/spectrum2/backend-logging.cfg etc/spectrum2/logging.cfg etc/spectrum2/transports/spectrum.cfg.example etc/spectrum2/transports/spectrum_server_mode.cfg.example etc/spectrum2/spectrum_manager.cfg
	do
		mv -f ${pkgdir}/${f} ${pkgdir}/${f}.new
	done
#	mkdir -pv ${pkgdir}/etc/rc.d
#	cat -v ${cwd}/rc.spectrum.in > ${pkgdir}/etc/rc.d/rc.spectrum.new
}

do_strip(){
	boldecho "Stripping"
	find "${pkgdir}" | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip -v --strip-unneeded 2> /dev/null
	find "${pkgdir}" | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip -v --strip-unneeded 2> /dev/null
	return 0
}

do_descr() {
	boldecho "Making description"
	mkdir -p "${pkgdir}/install"
	cat ${cwd}/slack-desc > ${pkgdir}/install/slack-desc
}

do_doinst() {
        cat ${cwd}/doinst.sh.in > "${pkgdir}/install/doinst.sh" 
        chmod 700 "${pkgdir}/install/doinst.sh"
}

do_clean() {
	rm -rf "${pkgdir}" "${tmpdir}/${name}-${version}"
}

boldecho "${name}.SlackBuild for ${filename}"

if [ ${UID} != 0 ]
then
	boldecho "You must be root to use this script" && do_exit
fi

if [ -d "${tmpdir}/${name}-${version}" ]
then
	boldecho "Found previous build directory. Removing."
	rm -rf "${tmpdir}/${name}-${version}"
fi

if [ ! -r "${filename}" ]
then
	boldecho "Cannot locate ${filename}" && do_exit
fi

trap 'do_clean; do_exit' TERM INT

cd "${tmpdir}" || do_exit
do_unpack || do_exit
cd "${name}-${version}" || do_exit
chown -R root:root . || do_exit
mkdir build
cd build
do_cmake || do_exit
do_make || do_exit
do_install || do_exit
cd ..
do_man
do_doc
do_strip
do_descr
do_doinst
cd "${pkgdir}" || do_exit
/sbin/makepkg -l y -c n "${tmpdir}/${name}-`echo ${version} | tr '-' '_'`-${arch}-${rev}.txz" || do_exit
cd "${cwd}" || do_exit
do_clean
boldecho "Done"
exit 0
