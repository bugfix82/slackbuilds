#!/bin/sh

# assign $BUILDCLIENT env to some value to build client only 
[ -z $BUILDCLIENT ] || echo "Building client-only bacula package"
[ -z $BUILDCLIENT ] || extraname="client-"

name="bacula" 
version="7.4.7"
filename="${name}-${version}.tar.gz"
arch="${ARCH:-$(uname -m)}"
rev="1"
hostgcc=$(gcc -dumpmachine)
cwd=$(pwd)
tmpdir="/tmp"
pkgdir="${tmpdir}/${name}-${extraname}${version}-install"

case "${arch}" in
  i486|i686) SLKCFLAGS="-O2 -march=i486 -mtune=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
             ;;
  athlon-xp) SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
esac

boldecho() {
	echo -e "\n\033[1m$1\033[0m" && sleep 1
}

do_exit() {
	boldecho "Exiting due error or interrupt"
	exit 1
}

do_unpack(){
	test -f ${cwd}/${filename} || return 1
	boldecho "Unpacking"
	tar xvfz "${cwd}/${filename}" || return 1
	return 0
}

do_configure() {
	boldecho "Running configure"
	[ -z $BUILDCLIENT ] || EXTRA="--enable-client-only"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	./configure \
		--prefix=/usr \
		--localstatedir=/var \
		--sysconfdir=/etc/${name} \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--with-mysql \
		--with-sqlite3 \
		--with-scriptdir=/usr/share/bacula/scripts \
		--with-archivedir=/var/lib/bacula/archive \
		--with-working-dir=/var/lib/bacula/work \
		--with-db-user=bacula \
		--with-dir-user=bacula \
		--with-dir-group=bacula \
		--with-sd-user=bacula \
		--with-sd-group=bacula \
		--with-fd-user=root \
		--with-dir-password="XXX_REPLACE_WITH_DIRECTOR_PASSWORD_XXX" \
		--with-fd-password="XXX_REPLACE_WITH_CLIENT_PASSWORD_XXX" \
		--with-sd-password="XXX_REPLACE_WITH_STORAGE_PASSWORD_XXX" \
		--with-mon-dir-password="XXX_REPLACE_WITH_DIRECTOR_MONITOR_PASSWORD_XXX" \
		--with-mon-fd-password="XXX_REPLACE_WITH_CLIENT_MONITOR_PASSWORD_XXX" \
		--with-mon-sd-password="XXX_REPLACE_WITH_STORAGE_MONITOR_PASSWORD_XXX" \
		--with-fd-group=root ${EXTRA} || return 1
	return 0
}

do_make() {
	boldecho "Running make"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	make -j 2 || return 1
	return 0
}

do_install() {
	boldecho "Installing"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	make DESTDIR="${pkgdir}" install || return 1
	for i in bacula-sd bconsole bacula-dir bacula-fd
	do
		[ -f ${pkgdir}/etc/bacula/${i}.conf ] && mv -v ${pkgdir}/etc/bacula/${i}.conf{,.new}
	done
	mkdir -pv "${pkgdir}/etc/rc.d/"
	[ -z $BUILDCLIENT ] && install -vm 750 platforms/slackware/{rc.bacula-sd,rc.bacula-dir} ${pkgdir}/etc/rc.d
	install -vm 750 platforms/slackware/{functions.bacula,rc.bacula-fd} ${pkgdir}/etc/rc.d
	mkdir -pv "${pkgdir}/var/lib/bacula/restored"
	return 0
}

do_strip(){
	boldecho "Stripping"
	find "${pkgdir}" | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip -v --strip-unneeded 2> /dev/null
	find "${pkgdir}" | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip -v --strip-unneeded 2> /dev/null
	return 0
}

do_descr() {
	boldecho "Making description"
	mkdir -p "${pkgdir}/install"
	cat ${cwd}/slack-desc > ${pkgdir}/install/slack-desc
}

do_doinst() {
	cat ${cwd}/doinst.sh.in > "${pkgdir}/install/doinst.sh" 
	chmod 700 "${pkgdir}/install/doinst.sh"
}

do_clean() {
	rm -rf "${pkgdir}" "${tmpdir}/${name}-${version}"
}

boldecho "${name}.SlackBuild for ${filename}"

if [ ${UID} != 0 ]
then
	boldecho "You must be root to use this script" && exit 1
fi

if [ -d "${tmpdir}/${name}-${version}" ]
then
	boldecho "Found previous build directory. Removing."
	rm -rf "${tmpdir}/${name}-${version}"
fi

if [ ! -r "${filename}" ]
then
	boldecho "Cannot locate ${filename}" || do_exit
fi

trap 'do_clean; do_exit' TERM INT

cd "${tmpdir}" || do_exit
do_unpack || do_exit
cd "${name}-${version}" || do_exit
chown -R root:root . || do_exit
do_configure || do_exit
do_make || do_exit
do_install || do_exit
do_strip
do_descr
do_doinst
cd "${pkgdir}" || do_exit
/sbin/makepkg -l y -c n "${tmpdir}/${name}-${extraname}`echo ${version} | tr -d '-'`-${arch}-${rev}.txz"
cd "${cwd}" || do_exit
do_clean
boldecho "Done"
exit 0
