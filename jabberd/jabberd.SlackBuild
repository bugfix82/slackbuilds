#!/bin/sh

name="jabberd"
version="2.5.0"
filename="${name}-${version}.tar.xz"
arch="${ARCH:-`uname -m`}"
rev="3"
hostgcc=`gcc -dumpmachine`
cwd=`pwd`
tmpdir="/tmp"
pkgdir="${tmpdir}/${name}-${version}-install"

case "${arch}" in
  i486|i686)	SLKCFLAGS="-O2 -march=i486 -mtune=i686"
		SLKLDFLAGS=""; LIBDIRSUFFIX=""
		;;
  x86_64)	SLKCFLAGS="-O2 -fPIC"
		SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
		;;
  athlon-xp)	SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
		SLKLDFLAGS=""; LIBDIRSUFFIX=""
		;;
esac

boldecho() {
	echo -e "\n\033[1m$1\033[0m" && sleep 1
}

do_exit() {
	boldecho "Exiting due error or interrupt"
	exit 1
}

do_unpack(){
	test -f ${cwd}/${filename} || return 1
	boldecho "Unpacking"
	xzcat "${cwd}/${filename}" | tar xvf - || return 1
	return 0
}

do_configure() {
	boldecho "Running configure"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	./configure \
		--prefix=/usr \
		--localstatedir=/var \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--enable-debug \
		--enable-ssl \
		--enable-mysql \
		--enable-db \
		--enable-ldap \
		--disable-pam \
		--enable-pipe \
		--enable-fs \
		--enable-superseded \
		--enable-experimental \
		--with-extra-include-path=/usr/include/udns \
		--host="${hostgcc}" \
		--build="${hostgcc}" || return 1
	return 0
}

do_make() {
	boldecho "Running make"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	make -j 2 || return 1
	return 0
}

do_install() {
	boldecho "Installing"
	LDFLAGS="$SLKLDFLAGS" \
	CFLAGS="$SLKCFLAGS" \
	CXXFLAGS="$SLKCFLAGS" \
	make DESTDIR="${pkgdir}" install || return 1
	mkdir -pv ${pkgdir}/etc/rc.d/
	mkdir -pv ${pkgdir}/var/jabberd
	mkdir -pv ${pkgdir}/var/run/jabberd
	mkdir -pv ${pkgdir}/var/log/jabberd
	mv -v ${pkgdir}/usr/etc ${pkgdir}/etc/jabberd
	rm -rfv ${pkgdir}/usr/lib
	/usr/bin/find ${pkgdir}/etc/jabberd/ -type f -name "*.cfg" -o -name "*.conf" -o -name "*.xml" 2>/dev/null | while read f
	do
		sed -e 's|/usr/etc|/etc/jabberd|g' -i ${f}
		sed -e 's|/var/jabber/pid|/var/run/jabberd|g' -i ${f}
		mv -v ${f} ${f}.new
	done
	cat ${cwd}/rc.jabberd.new > ${pkgdir}/etc/rc.d/rc.jabberd.new
	return 0
}

do_man() {
	boldecho "Processing man pages"
	for i in {1..9} n m
	do
		rm -vf ${pkgdir}/usr/man/man${i}/*.gz
		( test -d ${pkgdir}/usr/man/man${i} && cd ${pkgdir}/usr/man/man${i} && gzip -v * )
	done
	return 0
}

do_doc() {
	boldecho "Processing docs"
	mkdir -p ${pkgdir}/usr/doc/${name}-${version}/{extras,html}
	cp -a COPYRIGHT HISTORY INSTALL README ${pkgdir}/usr/doc/${name}-${version}
	cp -a doc/*.html doc/logo.gif ${pkgdir}/usr/doc/${name}-${version}/html
	( cd etc ; cp -v `ls -1 | egrep -v 'Makefile|\.(am|in|m4|h|ac)$' | xargs` ${pkgdir}/usr/doc/${name}-${version}/extras )
	( cd test ; cp -v `ls -1 | egrep -v 'Makefile|\.(am|in|m4|h|ac)$' | xargs` ${pkgdir}/usr/doc/${name}-${version}/extras )
	( cd tools ; cp -v `ls -1 | egrep -v 'Makefile|\.(am|in|m4|h|ac)$' | xargs` ${pkgdir}/usr/doc/${name}-${version}/extras )
	cp ${cwd}/${name}.SlackBuild ${pkgdir}/usr/doc/${name}-${version}/${name}.SlackBuild
}

do_strip(){
	boldecho "Stripping"
	find "${pkgdir}" | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip -v --strip-unneeded 2> /dev/null
	find "${pkgdir}" | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip -v --strip-unneeded 2> /dev/null
	return 0
}

do_descr() {
	boldecho "Making description"
	mkdir -p "${pkgdir}/install"
	cat ${cwd}/slack-desc > ${pkgdir}/install/slack-desc
}

do_doinst() {
	cat ${cwd}/doinst.sh.in > "${pkgdir}/install/doinst.sh" 
	chmod 700 "${pkgdir}/install/doinst.sh"
}

do_clean() {
	rm -rf "${pkgdir}" "${tmpdir}/${name}-${version}"
}

boldecho "${name}.SlackBuild for ${filename}"

if [ ${UID} != 0 ]; then
	boldecho "You must be root to use this script" && do_exit
fi

if [ -d "${tmpdir}/${name}-${version}" ]
then
	boldecho "Found previous build directory. Removing."
	rm -rf "${tmpdir}/${name}-${version}"
fi

if [ ! -r "${filename}" ]; then
	boldecho "Cannot locate ${filename}" || do_exit
fi

trap 'do_clean; do_exit' TERM INT

cd "${tmpdir}" || do_exit
do_unpack || do_exit
cd "${name}-${version}" || do_exit
chown -R root:root . || do_exit
# do_patch || do_exit
do_configure || do_exit
do_make || do_exit
do_install || do_exit
do_man
do_doc
do_strip
do_descr
do_doinst
cd "${pkgdir}" || do_exit
/sbin/makepkg -l y -c n "${tmpdir}/${name}-`echo ${version} | tr -d '-'`-${arch}-${rev}.txz" || do_exit
cd "${cwd}" || do_exit
do_clean
boldecho "Done"
exit 0
